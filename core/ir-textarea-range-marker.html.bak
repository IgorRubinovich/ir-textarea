<dom-module id="ir-textarea-range-marker">
	<style>
		#marker {
			background : violet;
			padding-left : 3px;
			padding-right : 3px;
			outline : none;
		}
	</style>
	<template><span id="marker"
				contenteditable
				on-focus="observerConnect"
				on-blur="observerDisconnect"
				
				></span></template>	
</dom-module>
<script>
	(function() {
		var utils = ir.textarea.utils;	

		Polymer({
			is : "ir-textarea-range-marker",
			properties : {
				// tag outline of realContainer
				tagOutline : {
					type : String,
					notify : true
				},
				// actual container
				container : {
					type : Object,
					notify : true
				},				
				// actual offset
				offset : {
					type : Number,
					notify : true
				},
				// real range's container on side identified by bindToRange
				realContainer : {
					type : Object,
					notify : true
				},
				// real range's offset on side identified by bindToRange
				realOffset : {
					type : Number,
					notify : true
				},
				// real range's container element on side identified by bindToRange
				containerElement : {
					type : Object,
					notify : true
				},
				// real range's offset in container element on side identified by bindToRange
				containerElementOffset : {
					type : Number,
					notify : true
				},
				editor : {
					type : Object,
					notify : true,
					observer : "editorChanged"
				},
				bindToRange : {
					type : String,
					value : 'start'
				},
				visible : {
					type : Boolean,
					notify : true
				},
			},
			
			ready : function() {
				this.isCaret = this.$.marker.isCaret = true;
				this.hostMarker = this.$.marker.hostMarker = this;

				this.mo = new MutationObserver(this.mutationHandler.bind(this)),
				this.moconfig = {
						childList : true,
						subtree : true,
						characterData : true,
						characterDataOldValue : true
						//attributes : true
					}

				if(this.bindToRange == 'end')
					this.$.marker.style.background = 'lightgreen';

				this.originalInnerHTML = '';			
			},
			
			editorChanged : function(n, o) {
				var caretNavOpts = { 
										log : true, 
										caretSpan : this,
										caretSpanShow : this.show.bind(this),
										caretSpanHide : this.hide.bind(this)
									};

				this.caretNavigator = new ir.textarea.CaretNavigator(this.editor, caretNavOpts)
				
				if(o)
				{
					o.removeEventListener('keydown', this._activeKeyHandler)
					o.removeEventListener('mousedown', this._activeMouseHandler)
				}
				
				this.editor.addEventListener('keydown', this._activeKeyHandler = this.keyHandler.bind(this));
				this.editor.addEventListener('mousedown', this._activeMouseHandler = this.mouseHandler.bind(this));
			},
			
			observerConnect : function() {
				return;
				if(this.containerElement)
					this.mo.observe(this.containerElement, this.moconfig);
			},
			
			observerDisconnect : function() {
				this.mo.disconnect();
			},
			
			mutationHandler : function() {				
				var c, m = this.$.marker, lastInserted;
				
				if(!m.childNodes.length)
					return;

				if(c = utils.singleChildNode(m))
					if(c.nodeType == 3 && !c.textContent.length)
						return;

				this.observerDisconnect();				

				while(m.childNodes.length)
					lastInserted = this.parentNode.insertBefore(m.firstChild, this);
				
				if(lastInserted && lastInserted.nodeType == 3)
					this.setAt(lastInserted, lastInserted.textContent.length);

				this.hide()
				
				this.observerConnect();

				this.update();
			},
			
			show : function(container, offset) {
				var r = utils.getSelectionRange(), c, o;

				if(!container && !r)
					return;
					
				if(this.bindToRange != 'start' && r.collapsed)
					return this.hide();

				this.visible = true;

				if(container)
				{
					c = container
					o = offset;
					//this.setAt(container, offset);
				}
				else
				{
					c = this.container;
					o = this.offset;
				}
				
				if(c == this.editor && o == c.childNodes.length)
				{
					c.parentNode.appendChild(this);
				}
				else
				{
					if(c == this.editor)
					{
						c = c.childNodes[o]
						o = 0;
					}
					c.parentNode.insertBefore(this, c);
				}

				this.pullRange();
			},
			
			hide : function() {
				var pn;
				
				this.visible = false;

				if(!this.parentNode)
					return;

				if(this != this.parentNode.lastChild && this.realContainer.nodeType != 3)
				{
					console.log('subtracting this.realOffset for ', this.realOffset, this.crealContainer);
					this.realOffset--;
				}

					
				pn = this.parentNode;
				pn.removeChild(this);
				
				//this.setAt(this.realContainer, this.realOffset, true);
					
				//this.updateFromCurrentRange();
				//this.update();
			},
			
			startListening : function()  {
				this.isListening = true;
				console.log("LISTENING: " + this.bindToRange)
			},
			
			stopListening : function()  {
				this.isListening = false;
				//console.log(this.bindToRange + " marker stopped listening")
			},
			
			mouseHandler : function (ev) {
				var c, o, cp;
				
				if(!this.isListening)
					return;

				if(ev.target.nodeType == 3)
					return;

				cp = utils.caretPositionFromPoint(ev.clientX, ev.clientY);

				o = cp.offset;
				c = cp.node;
				
				if(!c)
					return;
				
				if(!utils.isInLightDom(c, this.editor))
				{
					c = utils.getTopCustomElementAncestor(c, this.editor);
					o = 0;
				}
				
				this.caretNavigator.go({ container : c, offset : o});

				this.preventNextDefault = true;
				
				this.update();
			},
			
			keyHandler : function (e) {
				var dir;
				
				
				if(!this.isListening)
					return this.update();

				if(e.keyCode == 39)
					dir = 'forward';
				else
				if(e.keyCode == 37)
					dir = 'backward';
					
				if(dir)
				{
					this.caretNavigator.go(dir)
					e.preventDefault();
				}
				
				this.update();
			},
			
			update : function() {
				return;
				
				var tn, pos;
				
				this.updateFromCurrentRange();
				
				if(this.isListening)
					this.adjust();
			},

			adjust : function() {
				var pos;

				if(this.container)
					this.caretNavigator.setAt(this.container, this.offset);
					
				/*{
					pos = this.caretNavigator.setAt(this.container, this.offset);
					this.setAt(pos.container, pos.offset);
				}*/
			},

			pushRange : function(ev) {
				var tpce, cetnstart, cetnend, pd, nn, n, c, p;

				if(this.bindToRange == 'end')
					this.hide();
				
				ce = this.containerElement;
				ceo = this.containerElementOffset;
				
				if(!ce)
					return;
				
				this.hide();

				// inside custom element with c set to contenteditable
				tpce = utils.getTopCustomElementAncestor(c, this.editor);
				if(tpce && tpce != c)
				{
					cetnstart = this.realOffset == 0; // && this.realContainer.nodeType == 3;
					cetnend = this.realOffset == this.realContainer.length; // && this.realContainer.nodeType == 3;

					if((cetnstart && ev.keyCode == 8) || (cetnend && ev.keyCode == 46)) // backspace/del
						pd = true;
					else
					if(cetnstart && ev.keyCode == 37)
						pd = utils.setCaretAt(tpce, 0);
					else
					if(cetnend && ev.keyCode == 39)
						pd = utils.setCaretAt(tpce.parentNode, utils.getChildPositionInParent(tpce) + 1);
						
					if(pd)
						ev.preventDefault();
						
					return;
				}
				
				// other cases
				if(ev.keyCode == 37 && this.offset > 0) // left
				{
					this.hide();
					pd = utils.setCaretAt(this.container, this.offset - 1);
				}
				else
				if(ev.keyCode == 39) // right
				{
					// this.hide();

					nn = this.nextPosition(this.realContainer, this.realOffset);
					//console.log(`right: ${this.bindToRange} ${ev.type} from ${this.realContainer.textContent}, ${this.realOffset} to ${nn.container.textContent}, ${nn.offset}`);
					
					if(nn)
						pd = this.setAt(nn.container, nn.offset, true);
					
					//this.update();						
				}
				else
				if(ev.keyCode == 36) // home
				{
					this.hide();
					pd = utils.setCaretAt(this.containerElement, 0);
				}
				else
				if(ev.keyCode == 35) // end
				{
					this.hide();
					pd = utils.setCaretAt(this.containerElement, this.containerElement.childNodes.length);
				}
				
				if(pd)
					ev.preventDefault();

				//utils.setCaretAt(this.realContainer, this.realOffset);

			},
			
			nextPosition : function(container, offset, fromNode) {
				this.caretNavigator.go("forward");
			},

			previousPosition : function(container, offset, fromNode) {
				this.caretNavigator.go("backward");
			},

			pullRange : function() {
				var r = utils.getSelectionRange() || {}, tn;

				tn = this.$.marker.firstChild;
				if(!tn)
				{
					tn = this.$.marker.appendChild(document.createTextNode(''));
					tn.isCaret = true;
					tn.hostMarker = this.hostMarker;
				}

				if(r.collapsed)
					return utils.setCaretAt(tn, 0);

				if(this.bindToRange == 'start')
					return utils.setCaretAt(tn, 0, r.ec, r.eo);

				if(this.bindToRange == 'end')
					return utils.setCaretAt(r.sc, r.so, tn, 0);
			},
			
			updateFromCurrentRange : function() {
				var r = utils.getSelectionRange(), c, o, chm;
				
				if(!r)
					return;
				
				c = r[this.bindToRange + "Container"];
				o = r[this.bindToRange + "Offset"];
				
				if(this.realContainer && (c == this.realContainer && o == this.realOffset))
					return
				
				this.setAt(c, o);
			},

			setAt : function(container, offset, setRange) {
				var chm, r, realOffset, oc, oo, 
					fields = "container,offset,realContainer,realOffset,containerElement,containerElementOffset";

				chm	= container && container.hostMarker;
				
				if(chm && chm != this)
					fields.split(",").forEach(function(f) { this.set(f, chm[f]); }.bind(this))
				else
				if(!chm)
				{
					this.set('container', container);
					this.set('offset', offset);
					this.set('realContainer', container);
					this.set('realOffset', offset);
					this.set('containerElement', !container || container == this.editor ? container : container.parentNode);
					this.set('containerElementOffset', !container || container == this.editor ? offset : utils.getChildPositionInParent(container, true));
				}

				this.set('tagOutline', utils.tagOutline(this.containerElement));

				if(setRange)
				{
					r = utils.getSelectionRange() || {};

					if(r.collapsed)
						return utils.setCaretAt(container, offset);
					
					if(this.bindToRange == 'start')
						return utils.setCaretAt(container, offset, r.ec, r.eo);

					return utils.setCaretAt(r.sc, r.so, container, offset);
				}
			},			
		})
		
			
		function parentNode(node) {
			if(Polymer.dom(node).parentNode != node.parentNode && !utils.isInLightDom(node, top))
				return Polymer.dom(node).parentNode;
			else
				return node.parentNode;
		}
	})();
</script>
			
